<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>小星的博客</title><description>技术与学习分享交流</description><link>https://xiaoxing1617.github.io/</link><language>zh_CN</language><item><title>科学上网</title><link>https://xiaoxing1617.github.io/blog/posts/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/20250901-qkpx/</link><guid isPermaLink="true">https://xiaoxing1617.github.io/blog/posts/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/20250901-qkpx/</guid><pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;序言&lt;/h1&gt;
&lt;p&gt;因Clash for Windows作者受到不可抗力因素影响，导致Clash for Windows被迫删除仓库停止维护，我们急需寻找一个代替产品&lt;/p&gt;
&lt;h1&gt;软件安装&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;不同的系统和处理器也有不同对应的软件，我帮你总结了一个表格提供参考&lt;/li&gt;
&lt;li&gt;以下表格下载链接都是开源软件的github下载包地址，如果不能正常打开可以使用镜像代理下载&lt;/li&gt;
&lt;li&gt;本表格以统计日（2025.09.01）的最新版本，如果需要下载最新版本请进入软件后自助更新或者去Github下载最新发布的版本&lt;/li&gt;
&lt;li&gt;镜像代理地址：&lt;a href=&quot;https://ghproxy.link/&quot;&gt;ghproxy.link&lt;/a&gt; 怎么使用详见官网&lt;/li&gt;
&lt;li&gt;目前市面上软件都放弃了对win7的支持，但是你可以去下载这些开源软件的历史版本&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;软件&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Windows 10及以上&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Android（安卓）&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;iPhone / iPad&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;MacOS&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Linux（图形界面）&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Windows 7&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;GitHub地址（获取最新版本）&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Clash Verge【⭐推荐】&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.4.1/Clash.Verge_2.4.1_x64-setup.exe&quot;&gt;64位&lt;/a&gt;&amp;lt;br /&amp;gt;&lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.4.1/Clash.Verge_2.4.1_arm64-setup.exe&quot;&gt;ARM64&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;需非大陆区的苹果账号才能下载，可加微信咨询&amp;lt;br /&amp;gt;&lt;strong&gt;微信号：_xiaoxing1617&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.4.1/Clash.Verge_2.4.1_x64.dmg&quot;&gt;intel芯片&lt;/a&gt;&amp;lt;br /&amp;gt;&lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.4.1/Clash.Verge_2.4.1_aarch64.dmg&quot;&gt;apple M芯片&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;【DEB包】使用 apt ./路径 安装&amp;lt;br/&amp;gt;&lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.4.1/Clash.Verge_2.4.1_amd64.deb&quot;&gt;64位&lt;/a&gt; | &lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.4.1/Clash.Verge_2.4.1_aarch64.deb&quot;&gt;ARM64&lt;/a&gt; | &lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.4.1/Clash.Verge_2.4.1_armhf.deb&quot;&gt;ARMv7&lt;/a&gt;&amp;lt;br/&amp;gt; &amp;lt;br/&amp;gt;【RPM包】使用 dnf ./路径 安装&amp;lt;br/&amp;gt;&amp;lt;br&amp;gt;&lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.4.1/Clash.Verge_2.4.1_amd64.rpm&quot;&gt;64位&lt;/a&gt; | &lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.4.1/Clash.Verge_2.4.1_aarch64.rpm&quot;&gt;ARM64&lt;/a&gt; | &lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/releases/download/v2.4.1/Clash.Verge_2.4.1_armhfp.rpm&quot;&gt;ARMv7&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/clash-verge-rev/clash-verge-rev/&quot;&gt;https://github.com/clash-verge-rev/clash-verge-rev/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v2rayN&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/2dust/v2rayN/releases/download/7.13.8/v2rayN-windows-64.zip&quot;&gt;64位&lt;/a&gt;&amp;lt;br /&amp;gt;&lt;a href=&quot;https://github.com/2dust/v2rayN/releases/download/7.13.8/v2rayN-windows-arm64.zip&quot;&gt;ARM64&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/2dust/v2rayN/&quot;&gt;https://github.com/2dust/v2rayN/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;v2rayNG&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/2dust/v2rayNG/releases/download/1.10.19/v2rayNG_1.10.19_arm64-v8a.apk&quot;&gt;arm64-v8a(一般是这个)&lt;/a&gt;&amp;lt;br/&amp;gt;&lt;a href=&quot;https://github.com/2dust/v2rayNG/releases/download/1.10.19/v2rayNG_1.10.19_armeabi-v7a.apk&quot;&gt;armeabi-v7a&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/2dust/v2rayNG/&quot;&gt;https://github.com/2dust/v2rayNG/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nekoray&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/MatsuriDayo/nekoray/releases/download/4.0.1/nekoray-4.0.1-2024-12-12-windows64.zip&quot;&gt;64位&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/MatsuriDayo/nekoray/releases/download/4.0.1/nekoray-4.0.1-2024-12-12-debian-x64.deb&quot;&gt;DEB包64位&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/Matsuridayo/nekoray/&quot;&gt;https://github.com/Matsuridayo/nekoray/&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1&gt;机场选择&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;天下没有免费的午餐，免费的才是最贵的&lt;/li&gt;
&lt;li&gt;以下是我推荐的平台，仅供参考，您也可自行选择&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;平台&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;地址&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;介绍&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;魔戒&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://mojie.me/#/register?code=08Ih8hYR&quot;&gt;https://mojie.me/#/register?code=08Ih8hYR&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;便宜、稳定、不限设备数、不限速度、不限使用时间、节点丰富&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;狗子云&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://dash.gouziyun.com/register?code=SpVsgFBl&quot;&gt;https://dash.gouziyun.com/register?code=SpVsgFBl&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;高速、稳定、节点丰富、ChatGPT稳定专线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;（更多）&lt;/td&gt;
&lt;td&gt;自行谷歌&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content:encoded></item><item><title>两年前接私活做的一个关于高并发简易解决方案及思维导图</title><link>https://xiaoxing1617.github.io/blog/posts/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/20250901-j3u9/</link><guid isPermaLink="true">https://xiaoxing1617.github.io/blog/posts/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/20250901-j3u9/</guid><pubDate>Mon, 01 Sep 2025 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;之前接私活遇到过高并发的问题，就是在同一时刻可能会用多个用户抢注这个NFT商品卡片。为了防止用户用机器批量刷量请求和可能导致同一个NFT被多个人抢到的情况，于是就做出和提出了这个方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;实现解释&lt;/h2&gt;
&lt;p&gt;先看图：
&lt;img src=&quot;./1.png&quot; alt=&quot;图片alt&quot; /&gt;
整体的实现方案就是，做一个“请求keys池”，可以系统设置key的数量，具体就是为了控制高并发请求情况。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;例如系统设置100个key在这个池子里&lt;/li&gt;
&lt;li&gt;一个新的用户第一次请求接口会从这个池子里分发一个key给这个用户&lt;/li&gt;
&lt;li&gt;当这个keys池里的key消耗分发完之后就会让后期的用户等待，不过此时会像12306的火车票一样给他发一个候补标识&lt;/li&gt;
&lt;li&gt;如果有key的回收回来就按照候补列表给用户分发key&lt;/li&gt;
&lt;li&gt;假如候补用户列表是user1、user2、user3，keys池中刚刚回收来了1个key，如果user2先请求过来了就给user2，当然从候补列表就剔除它了&lt;/li&gt;
&lt;li&gt;当一个用户得到key之后，就可以对接口发起请求了，当然接口并发数也可以通过设置更改&lt;/li&gt;
&lt;li&gt;例如系统设置同一个key只能并发最多10个请求，那么就会做出相应的拦截&lt;/li&gt;
&lt;li&gt;此时就会有人发现一个问题了，如果一个用户拿到一个key之后一直刷请求占住这个key怎么办？&lt;/li&gt;
&lt;li&gt;首先做keys池限制的只有几个接口，比如购买接口、抢注接口，查询接口不做限制处理&lt;/li&gt;
&lt;li&gt;然后在用户每一次请求抢注接口时，会做一个行为列表记录，记录他的一些设备信息和ip等&lt;/li&gt;
&lt;li&gt;系统也会限制同一个key请求抢注接口的次数，比如用户刷请求过了限制数也会主动收回key&lt;/li&gt;
&lt;li&gt;也会有过期时间限制，对比用户上一次的请求时间，过1分钟没有请求就回收key&lt;/li&gt;
&lt;li&gt;记录设备信息和ip信息，会分析一些异常请求非法方式请求会直接回收key
从以上设计角度，可以有效防止高并发效果和一些恶意请求等问题，当然了，还是需要后端去做更复杂的请求处理和技术架构方案，我这里只是浅浅的分析和做出的方案，不喜勿喷！&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>关于移动端时输入框在页面底部情况下的技术优化方案</title><link>https://xiaoxing1617.github.io/blog/posts/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/20250829-2okm/</link><guid isPermaLink="true">https://xiaoxing1617.github.io/blog/posts/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/20250829-2okm/</guid><pubDate>Fri, 29 Aug 2025 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;首先，解释一下什么是输入框在页面底部的情况？在我们日常使用大多数软件的时候可以发现，一些需要输入的框，一般占在页面的前三分之二部分，不会在很底部或者直接置底，因为这个可能会导致用户在聚焦输入框开始输入内容时，输入法键盘本身是有高度的，如果输入框在很底部的情况时键盘可能会遮挡输入框内容，导致用户无法实时查看输入内容。可以理解为，确实聚焦了这个输入框，但是只能输入却因为遮挡原因看不到输入内容了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此大部分情况下，如果输入框确实需要在页面底部出现，大多数解决方案是新开一个页面让用户去输入这个内容，或者在页面中间弹出悬浮层完成内容的输入。如果是遇到必须在当前页面当前位置完成输入，就可能考虑使用这种解决优化方案。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;1. 问题的表现是怎样的？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;本身uniapp包括微信小程序提供的输入框是支持一个属性的，就是自动上推页面功能，从系统上会依据输入法高度上推底层页面栈，但是如图你也可以看到另外一个小小的体验问题，如果输入框本身在很底部，系统只会上推以输入法的高度的像素，这可能会导致用户只能看见一行不能完整出现输入框主体。当然了如果是单行输入框就没有什么大的影响，如果是多行的时候，会影响用户使用体验。&lt;/li&gt;
&lt;li&gt;虽然输入框会自动上推，比如你输入了两行会自动上推到两行文字，但是如果用户需要拨回到第一行时那么第二行文字是遮挡的，这样一定程度可能会影响用户的使用体验。（如下图）
&lt;img src=&quot;./1.png&quot; alt=&quot;图片alt&quot; /&gt;&lt;/li&gt;
&lt;li&gt;理想状态下，用户在聚焦输⼊框时应当上推全部（即输入框主体全部），⾄少可以完整看⻅输⼊框主体，⽽不是只能看到 最新⼀⾏⽂字聚焦点。展⽰整体即⽅便⽤⼾上下滑动检查⽂字内容、⽅便⽤⼾选择指定⽂字复制粘贴、滑动复读等场景，也提⾼UI的美观度.....&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;2. 解决办法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;仅供参考，你也可以用自己的解决办法&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;如果你的业务需求必须是将输入框放在底部，或者页面的3/2以下的情况时，你可以参考这种解决方案&lt;/li&gt;
&lt;li&gt;首先uniapp它官方文档提供了一个获取键盘高度的生命周期API，uni.onKeyboardHeightChange，当键盘出现时或者用户调整了键盘高度变化时，都会触发这个回调方法&lt;/li&gt;
&lt;li&gt;然后，获取输入框的聚焦回调事件，实时依据输⼊法键盘⾼度改变并整体上推最底层⻚⾯栈，计算⻚⾯⾼度以及键盘⾼度和输⼊框的位置与⾼度信息，去计算出需要上推⻚⾯的⾼度像素值&lt;/li&gt;
&lt;li&gt;看起来不难，这里只是给出一个解决方案，具体实现你可以自己思考去做，如图：
&lt;img src=&quot;./2.png&quot; alt=&quot;图片alt&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>微信小程序内调起微信⽀付、小程序ios端支付场景技术应⽤和解决方案</title><link>https://xiaoxing1617.github.io/blog/posts/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/20250829-fmy1/</link><guid isPermaLink="true">https://xiaoxing1617.github.io/blog/posts/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/20250829-fmy1/</guid><pubDate>Fri, 29 Aug 2025 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;一、背景（引用微信文档的话）&lt;/h1&gt;
&lt;h3&gt;1. 什么是虚拟⽀付？&lt;/h3&gt;
&lt;p&gt;虚拟⽀付是指购买⾮实物商品。⽐如：VIP会员、充值、录制课程、录制⾳频视频等虚拟产品。⽬前。&lt;em&gt;iOS端暂不⽀持虚拟⽀付。&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;2.常⻅iOS虚拟⽀付违规类型有哪些？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;付费解锁优质服务：多体现为提供虚拟商品的⼩程序可通过⽀付购买、开通虚拟会员等形式，体验 ⼩程序付费服务。⽐如：⽀付阅读章节⼩说、同城⽣活服务平台付费发帖/付费置顶等。&lt;/li&gt;
&lt;li&gt;付费购买虚拟内容或道具：商品多体现为提前编辑好的、录制好的虚拟商品。如录制视频课程、游 戏道具。&lt;/li&gt;
&lt;li&gt;关闭iOS端虚拟⽀付功能后，虚拟商品⻚⾯仍然保留货架价格标签展⽰、购买/⽀付/订阅等功能或 按钮。&lt;/li&gt;
&lt;li&gt;关闭iOS端虚拟⽀付功能后，提供引导⽤⼾前往其他⽀付的路径/⽂案，完成虚拟⽀付闭环。&lt;/li&gt;
&lt;li&gt;关闭iOS端虚拟⽀付功能后，⼩程序中虚拟产品⻚⾯不可以含有付费性质的关键字（如：购买、已 购、付费、⽀付等），包括但不限于功能按钮、功能⻚⾯、⽀付提⽰及任何商品介绍等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;3.存在iOS虚拟⽀付的帐号将会受到怎样的处理？&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;永封“iOS⽀付接⼝”功能，⼩程序iOS端将⽆法调起⽀付能⼒&lt;/li&gt;
&lt;li&gt;永封“iOS⽤⼾搜索⼩程序”功能，iOS端将⽆法在搜索栏中搜索到该⼩程序&lt;/li&gt;
&lt;li&gt;下架7天限时整改通知，到期未整改，则永封“iOS⽤⼾打开⼩程序”功能：届时iOS端将⽆法打开 该⼩程序&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;4.官方推荐的3种整改 （其实等于扯淡，废话一样）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;关闭iOS付费通道&lt;/li&gt;
&lt;li&gt;所有付费内容均更改为免费&lt;/li&gt;
&lt;li&gt;前端直接拦截提⽰不可服务&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考文档：&lt;a href=&quot;https://developers.weixin.qq.com/community/operate/detail/1006&quot;&gt;ios虚拟支付&lt;/a&gt;、&lt;a href=&quot;https://developers.weixin.qq.com/community/develop/doc/00006c2a7f0980249d5cbe92151809&quot;&gt;# 公众号iOS虚拟支付行为的调整指引&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;⼆、虚拟支付解决方案&lt;/h1&gt;
&lt;h2&gt;安卓端&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以正常直接在⼩程序调起微信⽀付
&lt;img src=&quot;./1.png&quot; alt=&quot;图片alt&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ios苹果端&lt;/h2&gt;
&lt;h3&gt;方案一、引导关注微信公众号从H5完成支付&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一步：用户在⼩程序内点击⽀付&lt;/li&gt;
&lt;li&gt;第二步：弹窗出现⼀个公众号关注⼆维码&lt;/li&gt;
&lt;li&gt;第三步：⽤⼾⼿动⻓按⼆维码&lt;/li&gt;
&lt;li&gt;第四步：⽤⼾点击跳转公众号关注⻚&lt;/li&gt;
&lt;li&gt;第五步：跳转进⼊公众号关注⻚&lt;/li&gt;
&lt;li&gt;第六步：点击关注公众号（如果已经关注过公众号，就跳过这一步了）&lt;/li&gt;
&lt;li&gt;第七步：公众号会给⽤⼾发⼀个卡⽚&lt;/li&gt;
&lt;li&gt;第八步：点击这个打开这个卡⽚&lt;/li&gt;
&lt;li&gt;第九步：进⼊到H5⽀付⻚⾯内完成支付调起工作&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;✅优点：可以积累公众号关注用户量、留存用户流量&lt;/p&gt;
&lt;p&gt;❌缺点：操作繁琐，对用户来说可能比较难理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;./2.png&quot; alt=&quot;图片alt&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;方案二、引导进入小程序微信客服聊天对话框完成支付&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一步：用户在⼩程序内点击⽀付&lt;/li&gt;
&lt;li&gt;第二步：点击右下⻆的⼩⽅块，发送给客服这个卡⽚&lt;/li&gt;
&lt;li&gt;第三步：客服会给⽤⼾发⼀个卡⽚&lt;/li&gt;
&lt;li&gt;第四步：点击这个打开这个卡⽚&lt;/li&gt;
&lt;li&gt;第五步：进⼊到H5⽀付⻚⾯内完成支付调起工作&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;✅优点：操作相对简单，比上面步骤少很多&lt;/p&gt;
&lt;p&gt;❌缺点：不能积累公众号关注用户量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;./3.png&quot; alt=&quot;图片alt&quot; /&gt;&lt;/p&gt;
&lt;h1&gt;三、特别注意&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;以上给出的方案都是目前世面上主流在用的方案，但是其实都是&lt;strong&gt;属于违反微信规定规则&lt;/strong&gt;的。&lt;/li&gt;
&lt;li&gt;可见文档说的，禁止引导到其他平台或第三方页面完成支付，比如公众号内H5内支付等&lt;/li&gt;
&lt;li&gt;官方给的建议是直接放弃让ios用户付费功能，可能这不是扯淡！从商业角度来说是根本不可行的&lt;/li&gt;
&lt;li&gt;但是其实目前大家都用这样完成iso支付功能的，微信其实也算是睁一只眼闭一只眼吧？那我们只能等未来有一天腾讯和苹果谈拢了，大公司博弈小公司只能跟着适应“环境”，这确实是没办法的。&lt;/li&gt;
&lt;/ol&gt;
</content:encoded></item><item><title>关于wx.request和wx.uploadFile底层分析（多文件上传等问题）</title><link>https://xiaoxing1617.github.io/blog/posts/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/20250822-xt2m/</link><guid isPermaLink="true">https://xiaoxing1617.github.io/blog/posts/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/20250822-xt2m/</guid><pubDate>Fri, 22 Aug 2025 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;首先，你要先熟悉并了解HTTP底层原理。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从微信官方在文档里角度是这样划分的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;wx.request&lt;/code&gt; → 普通 HTTP 请求（JSON、表单字段）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;wx.uploadFile&lt;/code&gt; → 专门用于文件上传。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;换句话说：&lt;/strong&gt; &lt;code&gt;wx.request&lt;/code&gt; 没有“封装层”去处理 multipart/form-data 的复杂性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此&lt;/strong&gt;，从“理论规则”上来说&lt;code&gt;wx.request&lt;/code&gt;并不能上传文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;分析&lt;/h1&gt;
&lt;h2&gt;wx.request 为什么不能上传文件？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;从HTTP协议角度来说，只要能发送一个HTTP请求能传入一个文件。上传文件本质就是一个 HTTP POST 请求，body 里用 multipart/form-data 格式，把文件二进制流塞进去。所以只要能发 HTTP，就&amp;lt;u&amp;gt;“理论上”&amp;lt;/u&amp;gt;能上传文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但是微信小程序运行环境下，只能用wx.request这个API，所以网络请求就只能用微信提供的这个API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你可以把请求头的Content-Type改成multipart/form-data格式，这个格式是协议上传文件的，但是微信不会帮你处理 boundary、文件名、Content-Disposition 等协议部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其次，wx.request的data属性只支持string/object/ArrayBuffer这三个类型：如果是object就会自动序列化成 JSON 或 application/x-www-form-urlencoded；如果是string就原样发；如果是ArrayBuffer就当成原始 body 发，但不会自动帮你拼 multipart/form-data协议格式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;那为什么不能用axios或ajax等第三方网络请求库？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先我们要先了解这些网络请求库是怎么实现的，这些网络请求库其实只是为了方便开发者使用调用，提供一些常用方法或者一些现成的方法工具。无论如何他的底层都是要用到环境底层的网络请求API，例如XMLHttpRequest/fetch。总结来说，他们只是对XMLHttpRequest/fetch的封装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首先我们这个文档讨论的是微信小程序这类小程序运行环境，并不是API齐全和丰富的浏览器环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这类小程序的运行环境，虽然本质也是浏览器二改的。但这是被二改过的环境，会删除一些API或者无用的API，专门为小程序这种环境精简过的环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也就是所谓的微信小程序“沙箱”环境，微信在底层拦截了网络请求，只允许走它的网络栈。他只允许使用他自己提供的wx.request API去发送网络请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虽然有社区的人根据axios的调用方式写了专门用于小程序环境的工具库，因为小程序的“沙箱”环境根本就是没有XMLHttpRequest/fetch，所以axios这类网络请求工具，它本质还是用wx.request API，所以就根本没办法逃脱出上一个问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;那该怎么上传文件？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;微信为了安全和控制流量，强制所有网络走它自己设计的 API&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因此，微信从底层API上设计了两个API，就是wx.request和wx.uploadFile，一个就是为了发普通数据的网络请求，一个则专门是用来上传文件的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所以，如果是上传文件就调用wx.uploadFile，它里面专门处理请求头信息，以及multipart/form-data协议格式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;能不能多文件上传，该怎么解决？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在微信小程序里一次上传多个文件，官方 API wx.uploadFile 设计上只支持单个文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一次只能上传一个文件，这是微信 API 的限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你一定要“一次请求”上传多个文件，那就得自己拼 multipart/form-data，走 wx.request，但那就回到前面我们说的手动拼协议，非常麻烦了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主流现行方案都是一个一个上传，比如9张照片循环调用wx.uploadFile，用Promise.all包住。但是需你手动限制和控制上传请求的并发数，因为微信文档来说，wx.request、wx.uploadFile、wx.downloadFile 的最大并发限制是 10 个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;极为少见且少用的方案是把所有图片转成base64，以wx.request API的对象形式提交，缺点很明显，对小程序运行设备内存有很大要求，如果转化过程是要放在小程序内存里的，一般我们也不能这样做。而且Base64 会让数据体积 膨胀大约33%左右，转成字符串后会占用大量内存（JS 引擎里字符串要额外开销）。对低端手机、微信沙箱环境非常吃内存，容易 OOM / 卡死 / 请求失败，而且小程序本身有 单次请求体积限制（10MB 左右），所以大文件基本跑不通。Base64 编解码本身也要 CPU 运算，在低端机上转换大文件会卡顿。JSON 序列化/反序列化也会变慢&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;结论&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不是说 wx.request 技术上绝对不能上传文件，而是它 没提供“易用的文件上传能力”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬要用 wx.request 上传文件，也可以读文件转ArrayBuffer，自己拼 multipart/form-data 协议（boundary、headers、文件内容）。这样是可行的，但写起来很麻烦，而且这需要你对multipart/form-data 协议格式很熟练熟悉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微信官方才会推荐你用wx.uploadFile，因为它天然帮你解决了 90% 的麻烦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wx.request 不支持文件上传是因为它设计时只负责 JSON/表单请求，没有内建 multipart/form-data 的封装和进度支持；真正的上传需求要用 wx.uploadFile&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微信小程序里 没有 DOM、没有 XHR、没有 fetch，整个运行时不是浏览器，小程序环境也更没有浏览器的 XHR/fetch，axios或ajax等库在小程序里用的时候，本质都是“封装 + 适配器”，底层调用wx.request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;boundary / Content-Disposition / Content-Type 是标准的 multipart/form-data 协议字段，方便后端自动解析。你要是跟后端约定了自己的协议（比如“直接传裸二进制，不加 boundary”），那当然没问题。但代价是：你们要写自定义解析逻辑，不能用框架的现成解析器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果后端走的是现成框架（比如 Spring MVC、Express、Django、Thinkphp），它们默认是用multipart/form-data协议标准去解析上传的文件的，你不按标准来，框架就直接解析失败。因此后端可能也需要做特殊处理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;方案&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;老老实实用官方提供的API和方案走&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自己去网上查，如上我已经举例很多了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;看完是不是感觉又涨“芝士”了，还不点这个赞？&lt;/strong&gt;&lt;/p&gt;
</content:encoded></item></channel></rss>